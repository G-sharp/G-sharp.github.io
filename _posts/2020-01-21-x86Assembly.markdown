---
layout: post
title: x86汇编学习笔记
date: 2020-02-19 11:17:58
categories: Assembly
tags: Assembly
---
# x86汇编学习笔记 

>作者:Gsharp   
>日期:2020年2月2日  
>**参考书籍 《汇编语言》 [^1]**

## Debug

Debug 是DOS, Windows都提供的实模式(8086 方式)程序的调试工具.
> Windows下使用dosbox模拟dos环境, 挂载所在目录后打开debug.exe

### 涉及的Debug 功能

- `R` 查看, 修改CPU寄存器内容
- `D` 查看内存内容
- `E` 改写内存
- `U` 翻译内存中的机器指令为汇编指令
- `T` 执行一条机器指令
- `A` 写入汇编格式指令到内存中

#### `R`指令

1. #####  显示
   `R`
   ```Shell
   AX=0000 BX=0000 CX=0000 DX=0000 SP=00FD BP=0000 SI=0000 DI=0000 
   DS=073F ES=073F SS=073F CS=073F IP=0100 NV UP EI PL NZ NA PO NC
   073F:0100                     0000               ADD [BX+SI],AL
   ```

2. ##### 修改

   `R` + `REG`
   ```Shell
   -R IP
   IP 0100
   :0000
   
   -R
   AX=0000 BX=0000 CX=0000 DX=0000 SP=00FD BP=0000 SI=0000 DI=0000 
   DS=073F ES=073F SS=073F CS=073F IP=0000 NV UP EI PL NZ NA PO NC
   073F:0000                     0000               ADD [BX+SI],AL
   ```

#### `D`指令

1. ##### 显示
   
   `D`+`xxxx`:`xxxx`
   ```Shell
   0000:0000 00 00 00 00-00 00 00 00
   0000:0010 00 00 00 00-00 00 00 00
   0000:0020 00 00 00 00-00 00 00 00
   0000:0030 00 00 00 00-00 00 00 00
   0000:0040 00 00 00 00-00 00 00 00
   0000:0050 00 00 00 00-00 00 00 00
   0000:0060 00 00 00 00-00 00 00 00
   0000:0070 00 00 00 00-00 00 00 00
   ```

#### `E`指令

1. ##### 连续修改
   
   `E`+`xxxx`:`x` `value1` `value2` `value3` 

   ```Shell
   -E 1000:0 0 1 2 3 4 5 6 7
   -D 1000:0 7
   1000:0000 00 01 02 03 04 05 06 07
   ```   

2. ##### 单步修改内存
   
   `E`+`xxxx`:`x`

   ```Shell
   -E 1000:0
   1000:0000 00.00 00.01 00.02 00.03 00.04 00.05 00.06 00.07 
   ```

#### `U`指令

1. ##### 显示汇编代码
   `U`+`xxxx`:`x`

   ```Shell
   -U 1000:0
   1000:0000 B80100       MOV     AX,0001    
   1000:0003 B80200       MOV     BX,0002
   1000:0006 01D8         ADD     AX,BX
   ```
#### `T`指令

1. ##### 单步执行CS:IP处的代码
   `T`
   ```Shell
   -R
   AX=0000 BX=0000 CX=0000 DX=0000 SP=00FD BP=0000 SI=0000 DI=0000 
   DS=073F ES=073F SS=073F CS=1000 IP=0000 NV UP EI PL NZ NA PO NC
   1000:0000                   B80100               ADD    AX,0001
   -U 1000:0
   1000:0000 B80100       MOV     AX,0001
   -T 
   AX=0001 BX=0000 CX=0000 DX=0000 SP=00FD BP=0000 SI=0000 DI=0000 
   DS=073F ES=073F SS=073F CS=1000 IP=0000 NV UP EI PL NZ NA PO NC
   1000:0003                   B80200               ADD    BX,0002
   ```

2. ##### 多步执行CS:IP处的代码
   
   `T`+`num`
   
#### `A`指令

   
1. ##### 以汇编指令形式写入到内存的机器代码
    `A` + `xxxx`:`x`
    
    ```Shell
    -A 1000:0
    1000:0000    mov ax,1
    1000:0003    mov cx,2
    1000:0006    add ax,cx
    ```
## 寄存器[TODO]

8086CPU 共有14个寄存器.

|寄存器|名称|用途|
|:----:|:----:|:----:|
|AX|通用寄存器||
|BX|通用寄存器|
|CX|通用寄存器|
|DX|通用寄存器|
|CS|代码段寄存器|
|DS|数据段寄存器|
|SS|栈顶段寄存器|
|ES|寄存器|
|SI|寄存器|
|DI|寄存器|
|SP|栈偏移地址寄存器|
|BP|寄存器|
|IP|指令地址寄存器|
|DI|寄存器|
|PSW|程序状态字|

## 汇编程序

汇编程序由**汇编指令**和**伪指令**组成. 汇编指令是有对应机器码的指令,而伪指令由编译器执行,用来指示编译工作.

执行过程:
```flow
    st=>start: 源码文件 ASM
	op1=>operation: MASM编译
	op2=>operation: 目标文件 OBJ
	op3=>operation: LINK链接
	e=>end: 可执行文件EXE
	st->op1->op2->op3
    op3->e
```

``` asm6502
assume cs:codesg
codesg segment

       mov ax,2000H
       mov ss,ax
       mov sp,0
       add sp,10
       pop ax
       pop bx
       push ax
       push bx
       pop ax
       pop bx

       mov ax,4c00H
       int 21h
codesg ends

end
```

### LOOP
```asm6502
   mov cx,LoopNum
   tag:
        Loop Codes
        ...
        loop tag
```
**在汇编语言中,数据不能以字母开头,所以要加上0作前缀**

### 可执行程序加载过程 

DOS环境下调用程序将可执行文件加载至内存:
1. 找到一段起始地址 `SA:0000`的容量足够的内存空闲区
2. 在这段内存区的前256字节中创建一个称为程序段前缀(PSP)的数据区, DOS利用PSP来和被加载的程序进行通信.
3. 从这段内存的256字节处开始装入程序(`SA+10H:0000`),并设置程序地址.
4. 将该内存区的短地址存入`DS`中,初始化其他相关寄存器,设置CS:IP指向程序入口. 


[^1]: 《汇编语言》(第三版) 王爽著, 清华大学出版社.
